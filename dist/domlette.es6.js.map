{"version":3,"sources":["../src/index.es6.js"],"names":[],"mappings":"AAYA,MAAO,SAAS,EAAT,CAAW,GAAO,IAAP,CAAmB,IAAnB,GAAX,CAAsD,CAC3D,KAAM,GAAO,SAAS,aAAT,CAAuB,CAAvB,CAAb,CAEA,IAAK,GAAI,EAAT,GAAiB,EAAjB,CAC6B,QAAvB,QAAO,GAAM,CAAN,CADb,CAEI,EAAK,YAAL,CAAkB,CAAlB,CAAwB,EAAM,CAAN,CAAxB,CAFJ,CAII,EAAK,CAAL,EAAa,EAAM,CAAN,CAJjB,CAWA,MAHA,OAAM,CAAN,CAAY,CAAZ,CAGA,CAFuB,WAAnB,QAAO,EAEX,EAFoC,EAAQ,CAAR,CAEpC,CAAO,CACR,CAQD,MAAO,SAAS,MAAT,GAAuB,IAAvB,CAAsC,CAC3C,IAAK,GAAI,GAAI,CAAb,CAAgB,EAAI,EAAS,MAA7B,CAAqC,GAArC,CACO,EAAS,CAAT,CADP,GAI6B,QAAvB,QAAO,GAAS,CAAT,CAJb,CAKI,EAAO,WAAP,CAAmB,SAAS,cAAT,CAAwB,EAAS,CAAT,CAAxB,CAAnB,CALJ,CAOI,EAAO,WAAP,CAAmB,EAAE,EAAS,CAAT,CAAF,CAAnB,CAPJ,CAUD,CAED,MAAO,SAAS,IAAT,EAAc,CAAC,MAAO,UAAU","file":"domlette.es6.js","sourcesContent":["/**\n * Takes an an array of elements and outputs a node with the appropriate children attached\n * @name h\n * @param $0 {Array} the {Domlette} to turn into a {Node}\n * @param $0[0] name {String} this is the node name such as `'div'`, `'a'` or `'p'`\n * @param $0[1] attrs {Object} these are the attributes of the object you want to set. \n * @param $0[2] children {Array} an array of {Domlette} or {String} to append as children\n * @param $0[3] onMount {function} a callback to be called with the node reference once the node has been added to its\n * parent\n *\n * @returns {Node} a DOM Node created from the {Domlette} passed in\n */\nexport function h([name, attrs = {}, children = [], onMount]){ \n  const node = document.createElement(name);\n  \n  for (let attr in attrs){\n    if (typeof attrs[attr] === 'string'){\n      node.setAttribute(attr, attrs[attr]);\n    } else {\n      node[attr] = attrs[attr];\n    }\n  }\n\n  mount(node, children);\n  if (typeof onMount !== 'undefined') onMount(node);\n\n  return node;\n}\n\n/**\n * Mount an {Array} of {Domlette}s to the parent node\n * @name mount\n * @param parent {Node} the parent node to append to\n * @param elements {Array<Domlette>} the Domlettes to append to the parent\n */\nexport function mount(parent, elements = []) {\n  for (let i = 0; i < elements.length; i++) {\n    if (!elements[i]) { // skip false or null or undefined entries\n      continue;\n    }\n    if (typeof elements[i] === 'string') {\n      parent.appendChild(document.createTextNode(elements[i]));\n    } else {\n      parent.appendChild(h(elements[i]));\n    }\n  }\n}\n\nexport function jsx(){return arguments}\n"]}